#pragma checksum "C:\Users\trinh\source\repos\RequestTemplate\RequestTemplate\Views\Requests\Create.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "1531f4158929f3cd89f8226b98e4d06cf43ca890"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Requests_Create), @"mvc.1.0.view", @"/Views/Requests/Create.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Requests/Create.cshtml", typeof(AspNetCore.Views_Requests_Create))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\trinh\source\repos\RequestTemplate\RequestTemplate\Views\_ViewImports.cshtml"
using RequestTemplate;

#line default
#line hidden
#line 2 "C:\Users\trinh\source\repos\RequestTemplate\RequestTemplate\Views\_ViewImports.cshtml"
using RequestTemplate.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1531f4158929f3cd89f8226b98e4d06cf43ca890", @"/Views/Requests/Create.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"2fda2e95e24e3ea526a4b43c49a0fd099761cada", @"/Views/_ViewImports.cshtml")]
    public class Views_Requests_Create : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "new", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("select-state"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 1 "C:\Users\trinh\source\repos\RequestTemplate\RequestTemplate\Views\Requests\Create.cshtml"
  
    ViewData["Title"] = "Tạo quy trình";

#line default
#line hidden
            BeginContext(49, 1065, true);
            WriteLiteral(@"<div class=""request-area"">
    <div id=""request-title"">
        <h4>I. Tạo quy trình (bắt buộc)</h4>
        <label class=""control-label"">Tên quy trình (bắt buộc): </label>
        <input id=""request-name"" type=""text"" class=""form-control"" placeholder=""Tên quy trình""/>
        <span id=""name-validation"">Bắt buộc</span>
        <label class=""control-label"">Loại: </label>
        <div class=""custom-control custom-radio"">
            <input type=""radio"" id=""auto-proceed"" name=""customRadio"" checked class=""custom-control-input"">
            <label class=""custom-control-label"" for=""auto-proceed"">Không cần người thẩm định</label>
        </div>
        <div class=""custom-control custom-radio"">
            <input type=""radio"" id=""manual-proceed"" name=""customRadio"" class=""custom-control-input"">
            <label class=""custom-control-label"" for=""manual-proceed"">Cần người thẩm định</label>
        </div>
    </div>
</div>

<div class=""state-area"">
    <div class=""add-state-area"">
        <label for=");
            WriteLiteral("\"\">Chọn loại công việc:</label>\r\n        ");
            EndContext();
            BeginContext(1114, 125, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("select", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "1531f4158929f3cd89f8226b98e4d06cf43ca8905333", async() => {
                BeginContext(1173, 14, true);
                WriteLiteral("\r\n            ");
                EndContext();
                BeginContext(1187, 33, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "1531f4158929f3cd89f8226b98e4d06cf43ca8905731", async() => {
                    BeginContext(1207, 4, true);
                    WriteLiteral("Khác");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(1220, 10, true);
                WriteLiteral("\r\n        ");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.SelectTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
#line 25 "C:\Users\trinh\source\repos\RequestTemplate\RequestTemplate\Views\Requests\Create.cshtml"
__Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items = ViewBag.statemplate;

#line default
#line hidden
            __tagHelperExecutionContext.AddTagHelperAttribute("asp-items", __Microsoft_AspNetCore_Mvc_TagHelpers_SelectTagHelper.Items, global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(1239, 22551, true);
            WriteLiteral(@"
        <div class=""state-icon"">
            <!-- <i id="""" class=""far fa-plus-square"" title=""Thêm""></i> -->
            <i id=""generic"" class=""fas fa-tasks"" title=""Thông thường""></i>
            <i id=""absent"" class=""far fa-address-card"" title=""Nghỉ phép""></i>
            <i id=""email"" class=""fas fa-envelope"" title=""Email""></i>
            <i id=""fileulti"" class=""fas fa-file-upload"" title=""Upload file""></i>
            <i id=""edit"" class=""far fa-edit"" title=""Chỉnh sửa""></i>
            <i id=""comment"" class=""far fa-comment"" title=""Comment""></i>
            <div class=""states-partial"">

            </div>
        </div>
    </div>
</div>
<hr/>
<div class=""progress-page"">
    <h4>II. Sắp xếp thứ tự thực hiện quy trình (bắt buộc)</h4>
    <button class=""btn btn-warning"" id=""btn-graph"">Tạo mới</button>
    <div class=""progress-area"">
        
    </div>
</div>
<div class=""transition-page"">
    <h4>III. Thêm điều kiện để quy trình rẽ nhánh (không bắt buộc)</h4>
    <i>Nếu không thêm điều ");
            WriteLiteral(@"kiện, hệ thống sẽ tự động chuyển sang công việc tiếp theo dựa vào thứ tự đã được sắp xếp bên trên</i>
    <div class=""transition-area"">
    <button class=""btn btn-info"" id=""btn-condition"">Thêm điều kiện</button>
        
    </div>
</div>
<hr/>

<div class=""submit-work-flow"">
     <h4>IV. Hoàn tất tạo quy trình (bắt buộc)</h4>
    <button id=""btn-submit"" class=""btn btn-default"">Lưu lại</button>    
</div>

<style>
    .far, .fas{
        margin-left: 10px;
    }
        select {
            width: auto !important;
        }
    .far:hover {
        cursor: pointer;
    }
     .fas:hover {
        cursor: pointer;         
     }
     a:hover {
         cursor: pointer;
     }
</style>

<script>
    var ids = [];
    var curId = 0;
    var activities = [];
    var actions = ['approve', 'deny'];
    var cdt = 1;
    function generate_path() {
        $('.progress-area').html('');
        
        for (let i = 0; i < ids.length; i++) {
            const cur = ids[i];
   ");
            WriteLiteral(@"         var next = cur + 1;
            var activity = {};
            activity['name'] = $('#activity-name' + cur.toString()).val();
            var elem = '<select onchange=""change(this,' + (i + 1).toString() +')"" style=""display: inline-block"" class=""form-control"" id=""state-graph' + (i + 1).toString() + '"">';
           
            for (let j = 0; j < ids.length; j++) {
                const ai = ids[j];
                var name = $('#activity-name' + ai.toString()).val();
                elem += '<option value=""' + name + '"">' + name + '</option>';
                
            }
            elem += '</select>';
            if (i < ids.length - 1) {
                elem += '<div style=""display:inline-block"" class=""path"">'+
                            '<p style=""display:inline-block"">-></p>' + 
                        '</div>';
            }
            if (!activities.includes(activity.name)) {
                activities.push(activity.name);
            }
            $('.progress-area'");
            WriteLiteral(@").append(elem);
        }
    }
    function default_condition(params) {
        var new_elem = '<label style=""display: inline-block"" class=""control-label"">Điều kiện mặc định: </label>'
            + '<ul class=""list-group"">';
        for (let i = 0; i < params.length; i++) {
            if (i < params.length - 1) {
                new_elem += '<li class=""list-group-item disabled"">Nếu ' + params[i] + ' chọn approve thì chuyến đến ' + params[i+1] + '</li>';
            }
            else {
                new_elem += '<li class=""list-group-item disabled"">Nếu ' + params[i] + ' chọn approve thì kết thúc quy trình</li>';
            }
        }
        new_elem += '</ul>';
        $('.transition-area').append(new_elem);
    }
    function change(item, params) {
        for (let i = 0; i < ids.length; i++) {
            const cur = ids[i];
            if(cur != params) {
                $('#state-graph' + cur.toString() + ' option').each(function () { 
                     if ($(this).val() =");
            WriteLiteral(@"= item.value) {
                         $(this).remove();
                     }
                });
            }
        }
    }
    $('.select-group>select').change(function (e) { 
        console.log($('#state-graph' + e.toString()).value);
    });
    function createstate(id, type) {  
        var state_view = '<div class=""state-header"">' +
            '<div class=""state-name' + id +'"">' +
            '<label hidden id=""state-label' + id + '"" class=""control-label"">' +
                'Tên đầu việc: ' +
            '</label>' +
            '<input hidden id=""state-name' + id + '"" type=""text"" class=""form-control""/>' +
            '<span hidden id=""state-validation' + id + '"">Bắt buộc</span>' +
            '<select hidden class=""form-control"" id=""state-type' + id + '"">' +
                '<option value=""normal"">Trung gian</option>' + 
                '<option value=""start"">Bắt đầu</option>' + 
                '<option value=""end"">Kết thúc</option>' + 
            '</select>' + 
     ");
            WriteLiteral(@"       '<div id=""state-time' + id + '"" hidden>' + 
            '<label class=""control-label"">Thời gian bắt đầu</label>' +
            '<input type=""date"" class=""form-control"" id=""state-eta' + id +'"" />' +
            '</div>' +
            '<div class=""activity-area' + id + '"">' +
            '<label for="""">Tên công việc (bắt buộc): </label>';
            
        switch (type) {
            case 'CONTACT':
                return '';
                break;
            case 'FILEULTI':
                return '';
                break;
            case 'EDIT':
                return '';
                break;
            case 'ABSENT':
                if ($('#manual-proceed').is(':checked')) {
                    state_view += '<div class=""absent-contents"">' +
                            '<input type=""text"" class=""form-control"" placeholder=""Tên công việc"" id=""activity-name' + id + '"" value=""Xin nghỉ phép"">' +
                            '<a hidden onclick=""toggling()"" class=""control-label"">");
            WriteLiteral(@"Mô tả chi tiết</a>' +
                            '<input type=""text"" class=""form-control"" placeholder=""Mô tả nội dung công việc"" id=""activity-desc' + id + '"">' +
                            '<span hidden>Thời gian thực hiện công việc (giờ): </span> <input type=""number"" class=""form-control"" id=""activity-dura' + id + '"" hidden value=""1"">' +
                            '<label class=""control-label"">Tên nhân viên (bắt buộc): </label>' +
                            '<input type=""text"" class=""form-control"" placeholder=""Tên nhân viên"" id=""activity-worker' + id + '"" value=""Nguyễn Văn A"">' +
                            '<label class=""control-label"">Ngày vắng mặt (bắt buộc): </label> <input type=""date"" type=""text"" class=""form-control"" placeholder=""Ngày vắng mặt"" id=""activity-off-day' + id + '"">' +
                            '<label class=""control-label"">Lý do: </label>' + 
                            '<textarea class=""form-control"" placeholder=""Lý do"" rows=""3"" id=""activity-reason' + id + '"">Có việc gấp</textar");
            WriteLiteral(@"ea>' +
                            '<span hidden id=""activity-type' + id + '"">ABSENT</span>' + 
                            '</div>' +
                            '<div class=""role-area""><span hidden>Đối tượng thực hiện (chọn 1 hoặc nhiều):</span>' +
                                    '<select hidden class=""form-control"" id=""role-type' + id + '"" multiple>' +
                                        '<option selected selected value=""hr"">Bộ phận nhân sự</option>' +
                                        '<option selected value=""crm"">Bộ phận nghiệp vụ</option>' +
                                        '<option value=""other"">Khác</option>' +
                                    '</select>' +
                            '</div>' +
                        '</div>';
                }
                else{
                    alert(""Chuyển loại quy trình sang \""Cần người thẩm định\"" để tạo loại yêu cầu \""Vắng mặt\"""");
                    return '';
                }
                break;
          ");
            WriteLiteral(@"  case 'EMAIL':
                return '';
                break;
            case 'GENERIC':
                state_view += '<div class=""generic-contents"">' +
                        '<input type=""text"" class=""form-control"" placeholder="""" id=""activity-name' + id + '"">' +
                        '<div><a id=""detail-label"" onclick=""toggling(this)"" class=""control-label"">Mô tả chi tiết</a>' +
                        '<input type=""text"" class=""form-control"" placeholder=""Mô tả nội dung công việc"" id=""activity-desc' + id + '""></div>' +
                        '<a class=""control-label"" onclick=""toggling(this)"">Thời gian thực hiện công việc (giờ): </a> <input type=""number"" class=""form-control"" id=""activity-dura' + id + '"">' +
                        '<label hidden id=""activity-type' + id + '"">GENERIC</label>' + 
                        '</div>' +
                        '<div class=""role-area""><label class=""control-label"">Đối tượng thực hiện (chọn 1 hoặc nhiều):</label>' +
                                '");
            WriteLiteral(@"<select class=""form-control"" id=""role-type' + id + '"" multiple>' +
                                    '<option value=""hr"">Bộ phận nhân sự</option>' +
                                    '<option value=""cm"">Bộ phận nghiệp vụ</option>' +
                                    '<option selected value=""other"">Khác</option>' +
                                '</select>' +
                        '</div>' +
                    '</div>';
                break;
            case 'COMMENT':
                return '';
                break;
        }
        state_view += '</div>';
        return state_view;
    }

    $('#btn-graph').click(function (params) {
        generate_path();
    });

    $('#btn-condition').click(function (params) {
        if (cdt == 1) {
            temp_activities = [];
            for (let i = 0; i < ids.length; i++) {

                var activity = $('#state-graph' + ids[i].toString()).val();
                temp_activities.push(activity);
            }
        ");
            WriteLiteral(@"    default_condition(temp_activities);
        }
        add_transition(cdt);
        cdt++;
    });

    function add_transition(i) {
        var elem = '';
        elem += '<div><label style=""display:inline-block"" class=""control-label"">Nếu' +
        '<select style=""display: inline-block"" class=""form-control"" id=""select-cond' + i + '"">';
        activities.forEach(activity => {
            elem += '<option value=""' + activity + '"">' + activity +'</option>';
        });
        elem += '</select>' +
        'chọn <select style=""display: inline-block"" class=""form-control"" id=""select-acti' + i + '"">' ;
        actions.forEach(action => {
            elem += '<option value=""' + action + '"">' + action +'</option>';
        });
        elem += '</select>' +
        'thì đi đến' +
        '<select style=""display: inline-block"" class=""form-control"" id=""select-answ' + i + '"">';
        activities.forEach(activity => {
            elem += '<option value=""' + activity + '"">' + activity +'</optio");
            WriteLiteral(@"n>';
        });
        elem +='</select></label></div>';
        $('.transition-area').append(elem);
    }

    function toggling(self) {
        $(self).next('input').slideToggle();
    }

    function hide_validation(cur, id) {
        var new_id = id + ' ' + cur;
        alert(new_id);
        $(new_id).toggle();
    }
    function addActivity(id, type) {
        console.log('jumped into addactivity');
        console.log(type);
        var new_id = id * 10 + ids[id-1];
        ids[id-1]++;
        add_activity(new_id, type);
        // $('.selectpicker').selectpicker();
    }
    function add_activity(type) {
        var activity_view = '';
        switch (type) {
            case 'CONTACT':
                
                break;
            case 'FILEULTI':
                
                break;
            case 'EDIT':
                
                break;
            case 'ABSENT':
                if ($('#manual-proceed').is(':checked')) {
                    ");
            WriteLiteral(@"activity_view = '<div class=""absent-contents"">' +
                            '<input hidden type=""text"" class=""form-control"" placeholder=""Tên đầu việc"" id=""activity-name' + id + '"" value=""Xin nghỉ phép"">' +
                            '<input type=""text"" class=""form-control"" placeholder=""Mô tả nội dung công việc"" id=""activity-desc' + id + '"" hidden value="""">' +
                            '<span hidden>Thời gian thực hiện công việc (giờ): </span> <input type=""number"" class=""form-control"" id=""activity-dura' + id + '"" hidden value=""1"">' +
                            '<input type=""text"" class=""form-control"" placeholder=""Tên nhân viên"" id=""activity-worker' + id + '"" value=""Nguyễn Văn A"">' +
                            '<span>Ngày vắng mặt: </span> <input type=""date"" type=""text"" class=""form-control"" placeholder=""Ngày vắng mặt"" id=""activity-off-day' + id + '"">' +
                            '<textarea class=""form-control"" placeholder=""Lý do"" rows=""3"" id=""activity-reason' + id + '"">Có việc gấp</textarea>' +
");
            WriteLiteral(@"                            '<span hidden id=""activity-type' + id + '"">ABSENT</span>' + 
                            '</div>' +
                            '<div class=""role-area""><span hidden>Đối tượng thực hiện:</span>' +
                                    '<select hidden class=""form-control"" id=""role-type' + id + '"" multiple>' +
                                        '<option selected value=""hr"">Bộ phận nhân sự</option>' +
                                        '<option selected value=""crm"">Bộ phận nghiệp vụ</option>' +
                                        '<option value=""other"">Khác</option>' +
                                    '</select>' +
                            '</div>' +
                        '</div>';
                }
                else{
                    alert(""Chuyển loại quy trình sang \""Cần người thẩm định\"" để tạo loại yêu cầu \""Vắng mặt\"""");
                    activity_view = '';
                }
                break;
            case 'EMAIL':
           ");
            WriteLiteral(@"     
                break;
            case 'GENERIC':
                activity_view = '<div class=""generic-contents"">' +
                        '<input type=""text"" class=""form-control"" placeholder=""Tên đầu việc"" id=""activity-name' + id + '"">' +
                        '<input type=""text"" class=""form-control"" placeholder=""Mô tả nội dung công việc"" id=""activity-desc' + id + '"">' +
                        '<span>Thời gian thực hiện công việc (giờ): </span> <input type=""number"" class=""form-control"" id=""activity-dura' + id + '"">' +
                        '<span hidden id=""activity-type' + id + '"">GENERIC</span>' + 
                        '</div>' +
                        '<div class=""role-area"">' +
                                '<select class=""form-control"" id=""role-type' + id + '"" multiple>' +
                                    '<option value=""hr"">Bộ phận nhân sự</option>' +
                                    '<option value=""cm"">Bộ phận nghiệp vụ</option>' +
                               ");
            WriteLiteral(@"     '<option value=""other"">Khác</option>' +
                                '</select>' +
                        '</div>' +
                    '</div>';
                break;
                
        }
        var elem = '.activity-area' + id.toString().charAt(0);
        console.log(elem);
        $(elem).append(activity_view);
        // $('.selectpicker').selectpicker();
    }
    $('#name-validation').toggle();
    $('.state-icon>i').on('click', function () {
        $('.states-partial').append(createstate(curId + 1, $(this).attr('id').toUpperCase()));
        $('#activity-desc' + (curId + 1).toString()).slideToggle();
        $('#activity-dura' + (curId + 1).toString()).slideToggle();
        ids.push(curId + 1);
        curId++;
    }); 

    function get_rule() {
        rules = {};
        rules['paths'] = [];
        rules['states'] = {};
        states = {};
        for (let i = 0; i < ids.length; i++) {
            const cur = ids[i];
            rule = {};
        ");
            WriteLiteral(@"    var activity = $('#state-graph' + cur.toString()).val();
            if (i < ids.length - 1)
            {
                
                if (activity == undefined) {
                    return null;
                }
                rule['currentstate'] = activity;
                var next = cur + 1;
                rule['nextstate'] = $('#state-graph' + next.toString()).val();
                rule['action'] = 'approve';
                rules.paths.push(rule);
            }
            
            if (i == 0)
            {
                rules.states['start'] = activity;
            }
            else if (i == ids.length - 1)
            {
                rules.states['end'] = activity;
            }
        }
        return rules;
    }

    $('#btn-submit').on('click', function (params) {
        var request = {};
        var states = [];
        request['title'] = $('#request-name').val();
        if(request['title'] == undefined)
        {
            alert(""Nhập t");
            WriteLiteral(@"ên quy trình"");
        }
        request['process'] = {};
        request['process']['states'] = [];
        request['process']['actions'] = [];
        request['process']['roles'] = [];
        request['process']['rules'] = [];
        request['process']['activities'] = [];
        var idns = document.querySelectorAll('[id]');
        var rules = null;
        var manual = $('#manual-proceed').is(':checked');
        if (manual) {
            rules = get_rule();
            console.log(rules);
        }
        if (rules == null && manual)
        {
            alert(""Chưa tạo sơ đồ"");
            return;
        }
        for (let i = 1; i <= ids.length; i++) {
            state = {};
            activity = {};

            state['name'] = activity['name'] = $('#activity-name' + i.toString()).val();
            activity['description'] = $('#activity-desc' + i.toString()).val();
            activity['duration'] = $('#activity-dura' + i.toString()).val();
            activity['acti");
            WriteLiteral(@"vitytype'] = $('#activity-type' + i.toString()).text();
            var roles =$('#role-type' + i.toString()).val();
            activity['roles'] = [];
            activity['absentname'] = $('#activity-worker' + i.toString()).val();
            activity['dayoff'] = $('#activity-off-day' + i.toString()).val();
            <!-- activity['isreallynotapproved'] = $('#activity-reason' + i.toString()).val(); -->
            <!-- activity['approvername'] = $('#activity-worker' + i.toString()).val(); -->
            activity['reason'] = $('#activity-reason' + i.toString()).val();
            roles.forEach(element => {
                if(!activity['roles'].some(e => e.name === element)) {
                    activity['roles'].push({'name': element});
                }
            });
            state['eta'] = $('#state-eta' + i.toString()).val();
            state['activities'] = [];
            state['activities'].push(activity);
            states.push(state.name);
            
            if (!m");
            WriteLiteral(@"anual) {
                activities.push(activity.name);
                if(i == 1)
                {
                    state['statetype'] = 'start';
                }
                else if(i == ids.length)
                {
                    state['statetype'] = 'end';                
                }
                else
                {
                    state['statetype'] = 'normal';   
                }
            }
            else {
                if(rules.states.start == state.name)
                {
                    state['statetype'] = 'start';
                }
                else if(rules.states.end == state.name)
                {
                    state['statetype'] = 'end';                
                }
                else
                {
                    state['statetype'] = 'normal';   
                }
            }

            request['process']['states'].push(state);
        }
        
        if (!manual) {
            reques");
            WriteLiteral(@"t['process']['actions'] = ['auto'];
            for (let index = 0; index < states.length - 1; index++) {
                var rule = {'action': 'auto advance', 'currentstate': states[index], 'nextstate': states[index + 1]};
                request['process']['rules'].push(rule);
            }
        }
        else{
            rules.paths.forEach(path => {
                if (!actions.includes(path.action)) {
                    actions.push(path.action);
                    
                }
                request['process']['rules'].push(path);
                
            });
            if (cdt > 1) {
                for (let i = 1; i < cdt; i++) {
                    var another_rule = {};
                    another_rule['action'] = $('#select-acti' + i.toString()).val();                     
                    another_rule['currentstate'] = $('#select-cond' + i.toString()).val();                     
                    another_rule['nextstate'] = $('#select-answ' + i.toString()");
            WriteLiteral(@").val();    
                    var is_not_duplicated = true;
                    for (let index = 0; index < request['process']['rules'].length; index++) {
                        const rule = request['process']['rules'][index];
                        if (rule.action == another_rule.action || rule.currentstate == another_rule.currentstate || rule.nextstate == another_rule.nextstate) {
                            is_not_duplicated = false;
                        }
                    }
                    if (!is_not_duplicated) {
                        request['process']['rules'].push(another_rule);                 
                    }
                }
            }
        }
        actions.forEach(action => {
            request['process']['actions'].push({'name': action}) ;
        });
        request['currentstate'] = request.process.states[request.process.states.findIndex(i => i.statetype === 'start')].name;
        console.log(request);
        $.ajax({
            type: ""pos");
            WriteLiteral("t\",\r\n            url: \'");
            EndContext();
            BeginContext(23791, 32, false);
#line 521 "C:\Users\trinh\source\repos\RequestTemplate\RequestTemplate\Views\Requests\Create.cshtml"
             Write(Url.Action("create", "requests"));

#line default
#line hidden
            EndContext();
            BeginContext(23823, 421, true);
            WriteLiteral(@"',
            data: request,
            dataType: ""json"",
            header: {
                'content-type': 'application/json'
            },
            success: function (response) {
                console.log(response);
                alert(response);
            },
            error: function () {
                console.log('error');              
            }
        });
    });
</script>");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
