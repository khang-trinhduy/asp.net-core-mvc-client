@{
    ViewData["Title"] = "Tạo quy trình";
}
<div class="request-area">
    <div id="request-title">
        <h4>I. Tạo quy trình (bắt buộc)</h4>
        <label class="control-label">Tên quy trình (bắt buộc): </label>
        <input id="request-name" type="text" class="form-control" placeholder="Tên quy trình"/>
        <span id="name-validation">Bắt buộc</span>
        <label class="control-label">Loại: </label>
        <div class="custom-control custom-radio">
            <input type="radio" id="auto-proceed" name="customRadio" checked class="custom-control-input">
            <label class="custom-control-label" for="auto-proceed">Không cần người thẩm định</label>
        </div>
        <div class="custom-control custom-radio">
            <input type="radio" id="manual-proceed" name="customRadio" class="custom-control-input">
            <label class="custom-control-label" for="manual-proceed">Cần người thẩm định</label>
        </div>
        <div class="custom-control custom-radio">
            <input type="radio" id="tree-proceed" name="customRadio" class="custom-control-input">
            <label class="custom-control-label" for="tree-proceed">Quy trình dạng cây</label>
        </div>
    </div>
</div>

<div class="state-area">
    <div class="add-state-area">
        <label for="">Chọn loại công việc:</label>
        <select id="select-state" asp-items="@ViewBag.statemplate">
            <option value="new">Khác</option>
        </select>
        <div class="state-icon">
            <!-- <i id="" class="far fa-plus-square" title="Thêm"></i> -->
            <i id="generic" class="fas fa-tasks" title="Thông thường"></i>
            <i id="absent" class="far fa-address-card" title="Nghỉ phép"></i>
            <i id="email" class="fas fa-envelope" title="Email"></i>
            <i id="contact" class="fas fa-user-plus" title="Contact"></i>
            <i id="campaign" class="fas fa-folder-plus" title="Chiến dịch"></i>
            <i id="fileulti" class="fas fa-file-upload" title="Upload file"></i>
            <i id="edit" class="far fa-edit" title="Chỉnh sửa"></i>
            <i id="comment" class="far fa-comment" title="Comment"></i>
            <div class="states-partial">

            </div>
        </div>
    </div>
</div>

<div class="progress-page">
    <h4>II. Sắp xếp thứ tự thực hiện quy trình (bắt buộc)</h4>
    <button class="btn btn-warning" id="btn-graph">Tạo mới</button>
    <button class="btn btn-info" onclick="add_trigger()">Thêm trigger</button>
    <div class="progress-area">
        
    </div>
</div>
<hr/>
<div class="transition-page">
    <h4>III. Thêm điều kiện để quy trình rẽ nhánh (không bắt buộc)</h4>
    <i>Nếu không thêm điều kiện, hệ thống sẽ tự động chuyển sang công việc tiếp theo dựa vào thứ tự đã được sắp xếp bên trên</i>
    <div class="transition-area">
    <button class="btn btn-info" id="btn-condition">Thêm điều kiện</button>
        
    </div>
</div>
<hr/>

<div class="submit-work-flow">
     <h4>IV. Hoàn tất tạo quy trình (bắt buộc)</h4>
    <button id="btn-submit" class="btn btn-default">Lưu lại</button>    
</div>

<style>
    .far, .fas{
        margin-left: 10px;
    }
        select {
            width: auto !important;
        }
    .far:hover {
        cursor: pointer;
    }
     .fas:hover {
        cursor: pointer;         
     }
     a:hover {
         cursor: pointer;
     }
</style>

<script>
    var ids = [];
    var curId = 0;
    var activities = [];
    var actions = ['approve', 'deny'];
    var cdt = 1;
    var cc = 0;
    var request = {};
    var activate_trigger = false;
    function add_trigger() {
        activate_trigger = true;
    }
    function generate_path() {
        $('.progress-area').html('');
        var tree = $('#tree-proceed').is(':checked');
        if (!tree) {
            for (let i = 0; i < ids.length; i++) {
                const cur = ids[i];
                var next = cur + 1;
                var activity = {};
                activity['name'] = $('#activity-name' + cur.toString()).val();
                var elem = '<select onchange="change(this,' + (i + 1).toString() +')" style="display: inline-block" class="form-control" id="state-graph' + (i + 1).toString() + '">';
            
                for (let j = 0; j < ids.length; j++) {
                    const ai = ids[j];
                    var name = $('#activity-name' + ai.toString()).val();
                    elem += '<option value="' + name + '">' + name + '</option>';
                    
                }
                elem += '</select>';
                if (i < ids.length - 1) {
                    elem += '<div style="display:inline-block" class="path">'+
                                '<p style="display:inline-block">-></p>' + 
                            '</div>';
                }
                if (!activities.includes(activity.name)) {
                    activities.push(activity.name);
                }
                $('.progress-area').append(elem);

            }
        }
        else {
            var elem = '';
            for (let i = 0; i < ids.length - 1; i++) {
                const cur = ids[i];
                var next = cur + 1;
                var activity = {};
                activity['name'] = $('#activity-name' + cur.toString()).val();
                elem += '<div><select style="display: inline-block" class="form-control" id="current-node' + (i + 1).toString() + '">';
                
                for (let j = 0; j < ids.length;j++) {
                    const ai = ids[j];
                    var name = $('#activity-name' + ai.toString()).val();
                    elem += '<option value="' + name + '">' + name + '</option>';
                }
                elem += '</select><div style="display: inline-block" class="path">' + 
                        '<p style="display:inline-block">--</p>' +
                        '</div>';
                elem += '<input id="node-action' + (i + 1).toString() + '" class="form-control" placeholder="action" style="display:inline-block; width: auto" />';
                if (i < ids.length - 1) {
                    elem += '<div style="display: inline-block" class="path">' + 
                        '<p style="display:inline-block">--></p>' +
                        '</div>';
                }
                elem += '<select style="display: inline-block" class="form-control" id="next-node' + (i + 1).toString() + '">';
                
                for (let j = 0; j < ids.length;j++) {
                    const ai = ids[j];
                    var name = $('#activity-name' + ai.toString()).val();
                    elem += '<option value="' + name + '">' + name + '</option>';
                }
                elem += '</select></div>';                
                if (!activities.includes(activity.name)) {
                    activities.push(activity.name);
                }
            }
            cc = ids.length - 1;
            // elem += '<input type="button" class="btn btn-info" value="Thêm nhánh" onclick="add_path(' + cc + ')"/>';
            $('.progress-area').append(elem);
        }
        
    }
    function add_path(i) {
        i = cc;
        var elem = '<div><select style="display: inline-block" class="form-control" id="current-node' + (i + 1).toString() + '">';
        for (let j = 0; j < ids.length;j++) {
            const ai = ids[j];
            var name = $('#activity-name' + ai.toString()).val();
            elem += '<option value="' + name + '">' + name + '</option>';
        }
        elem += '</select><div style="display: inline-block" class="path">' + 
                '<p style="display:inline-block">--</p>' +
                '</div>';
        elem += '<input id="node-action' + (i + 1).toString() + '" class="form-control" placeholder="action" style="display:inline-block; width: auto" />';
        if (i < ids.length - 1) {
            elem += '<div style="display: inline-block" class="path">' + 
                '<p style="display:inline-block">--></p>' +
                '</div>';
        }
        elem += '<select style="display: inline-block" class="form-control" id="next-node' + (i + 1).toString() + '">';
        
        for (let j = 0; j < ids.length;j++) {
            const ai = ids[j];
            var name = $('#activity-name' + ai.toString()).val();
            elem += '<option value="' + name + '">' + name + '</option>';
        }
        elem += '</select></div>';
        cc++;
        $('.progress-area').append(elem);
        return;             
    }
    function default_condition(params) {
        var new_elem = '<label style="display: inline-block" class="control-label">Điều kiện mặc định: </label>'
            + '<ul class="list-group">';
        for (let i = 0; i < params.length; i++) {
            if (i < params.length - 1) {
                new_elem += '<li class="list-group-item disabled">Nếu ' + params[i] + ' chọn approve thì chuyến đến ' + params[i+1] + '</li>';
            }
            else {
                new_elem += '<li class="list-group-item disabled">Nếu ' + params[i] + ' chọn approve thì kết thúc quy trình</li>';
            }
        }
        new_elem += '</ul>';
        $('.transition-area').append(new_elem);
    }
    function change(item, params) {
        for (let i = 0; i < ids.length; i++) {
            const cur = ids[i];
            if(cur != params) {
                $('#state-graph' + cur.toString() + ' option').each(function () { 
                     if ($(this).val() == item.value) {
                         $(this).remove();
                     }
                });
            }
        }
    }
    $('.select-group>select').change(function (e) { 
        console.log($('#state-graph' + e.toString()).value);
    });
    function createstate(id, type) {  
        var state_view = '<div class="state-header">' +
            '<div class="state-name' + id +'">' +
            '<label hidden id="state-label' + id + '" class="control-label">' +
                'Tên đầu việc: ' +
            '</label>' +
            '<input hidden id="state-name' + id + '" type="text" class="form-control"/>' +
            '<span hidden id="state-validation' + id + '">Bắt buộc</span>' +
            '<select hidden class="form-control" id="state-type' + id + '">' +
                '<option value="normal">Trung gian</option>' + 
                '<option value="start">Bắt đầu</option>' + 
                '<option value="end">Kết thúc</option>' + 
            '</select>' + 
            '<div id="state-time' + id + '" hidden>' + 
            '<label class="control-label">Thời gian bắt đầu</label>' +
            '<input type="date" class="form-control" id="state-eta' + id +'" />' +
            '</div>' +
            '<div class="activity-area' + id + '">' +
            '<label for="">Tên công việc (bắt buộc): </label>';
            
        switch (type) {
            case 'CAMPAIGN':
                state_view += '<div class="campaign-contents">' +
                        '<input type="text" class="form-control" placeholder="Tên công việc" id="activity-name' + id + '" value="Add/Select a campaign">' +
                        '<div><a id="detail-label" onclick="toggling(this)" class="control-label">Mô tả chi tiết</a>' +
                        '<input type="text" class="form-control" placeholder="Mô tả nội dung công việc" id="activity-desc' + id + '"></div>' +
                        '<a class="control-label" onclick="toggling(this)">Thời gian thực hiện công việc (giờ): </a> <input type="number" class="form-control" id="activity-dura' + id + '">' +
                        '<div hidden style="display:block"><label class="control-label">Tên chiến dịch</label>' +
                        '<input hidden class="form-control" id="activity-camp' + id + '" type="text">' +
                        '<span hidden id="activity-type' + id + '">CAMPAIGN</span>' +
                        '</div>' +
                        '<div class="role-area"><span hidden>Đối tượng thực hiện (chọn 1 hoặc nhiều): </span>' +
                                    '<select hidden class="form-control" id="role-type' + id + '" multiple>' +
                                        '<option selected selected value="hr">Bộ phận nhân sự</option>' +
                                        '<option selected value="crm">Bộ phận nghiệp vụ</option>' +
                                        '<option value="other">Khác</option>' +
                                    '</select>' +
                            '</div>' +
                        '<div class="trigger-area">' +
                            '<label class="control-label">Trigger for:</label>' +
                            '<select class="form-control" id="trigger-cons' + id + '">' +
                                '<option selected selected value="campaign">campaign</option>' +
                                '<option value="other">Khác</option>' +
                            '</select>' +
                            '<label class="control-label">To:</label>' +
                            '<select class="form-control" id="trigger-meth' + id + '">' +
                                '<option selected selected value="startcampaign">start a campaign</option>' +
                            '</select>' +
                            '<div class="condition-area">' +
                                '<label>Conditions:</label>' +
                                '<div class="events" style="display: inline-block">' +
                                    '<label class="control-label" style="display: inline-block; width: auto">On: </label>' +
                                    '<select class="form-control" id="trigger-even' + id + '" style="display: inline-block">' +
                                        '<option selected selected value="contact">Contact</option>' +
                                        '<option value="other">Khác</option>' +
                                    '</select>' + 
                                    '<label class="control-label" style="display: inline-block; width: auto">If: </label>' +
                                    '<select class="form-control" id="trigger-para' + id + '" style="display: inline-block">' +
                                        '<option selected selected value="age">Age</option>' +
                                        '<option value="other">Khác</option>' +
                                    '</select>' + 
                                    '<select class="form-control" id="trigger-oper' + id + '" style="display: inline-block">' +
                                        '<option selected selected value="greaterorequal">>=</option>' +
                                        '<option value="lesserorequal"><=</option>' +
                                    '</select>' + 
                                    '<input style="display:inline-block" type="text" class="form-control" id="trigger-thre' + id +'">' + 
                                '</div>' +
                            '</div>' +
                        '</div>' +
                        '<hr/></div>';
                break;
            case 'CONTACT':
                state_view += '<div class="contact-contents">' +
                        '<input type="text" class="form-control" placeholder="Tên công việc" id="activity-name' + id + '" value="Add contact">' +
                        '<div><a id="detail-label" onclick="toggling(this)" class="control-label">Mô tả chi tiết</a>' +
                        '<input type="text" class="form-control" placeholder="Mô tả nội dung công việc" id="activity-desc' + id + '"></div>' +
                        '<a class="control-label" onclick="toggling(this)">Thời gian thực hiện công việc (giờ): </a> <input type="number" class="form-control" id="activity-dura' + id + '">' +
                        '<div style="display:block"><label class="control-label">Họ & tên</label>' +
                        '<input type="text" class="form-control" placeholder="Họ & tên" id="activity-cont' + id + '">' +
                        '<label class="control-label">SĐT</label>' +
                        '<input class="form-control" placeholder="SĐT" type="number" id="activity-numb' + id + '">' + 
                        '<label class="control-label">Email</label>' +
                        '<input class="form-control" placeholder="email" id="activity-emai' + id + '">' +
                        '<label class="control-label">Tuổi</label>' +
                        '<input type="number" min="1" class="form-control" placeholder="Tuổi" id="activity-age' + id + '">' +
                        '<span hidden id="activity-type' + id + '">CONTACT</span>' +
                        '</div></div>' +
                        '<div class="role-area"><span hidden>Đối tượng thực hiện (chọn 1 hoặc nhiều): </span>' +
                                    '<select hidden class="form-control" id="role-type' + id + '" multiple>' +
                                        '<option selected selected value="hr">Bộ phận nhân sự</option>' +
                                        '<option selected value="crm">Bộ phận nghiệp vụ</option>' +
                                        '<option value="other">Khác</option>' +
                                    '</select>' +
                            '</div>' +
                        '<hr/></div>';
                break;
            case 'FILEULTI':
                return '';
                break;
            case 'EDIT':
                return '';
                break;
            case 'ABSENT':
                if ($('#manual-proceed').is(':checked')) {
                    state_view += '<div class="absent-contents">' +
                            '<input type="text" class="form-control" placeholder="Tên công việc" id="activity-name' + id + '" value="Xin nghỉ phép">' +
                            '<a hidden onclick="toggling()" class="control-label">Mô tả chi tiết</a>' +
                            '<input type="text" class="form-control" placeholder="Mô tả nội dung công việc" id="activity-desc' + id + '">' +
                            '<span hidden>Thời gian thực hiện công việc (giờ): </span> <input type="number" class="form-control" id="activity-dura' + id + '" hidden value="1">' +
                            '<label class="control-label">Tên nhân viên (bắt buộc): </label>' +
                            '<input type="text" class="form-control" placeholder="Tên nhân viên" id="activity-worker' + id + '" value="Nguyễn Văn A">' +
                            '<label class="control-label">Ngày vắng mặt (bắt buộc): </label> <input type="date" type="text" class="form-control" placeholder="Ngày vắng mặt" id="activity-off-day' + id + '">' +
                            '<label class="control-label">Lý do: </label>' + 
                            '<textarea class="form-control" placeholder="Lý do" rows="3" id="activity-reason' + id + '">Có việc gấp</textarea>' +
                            '<span hidden id="activity-type' + id + '">ABSENT</span>' + 
                            '</div>' +
                            '<div class="role-area"><span hidden>Đối tượng thực hiện (chọn 1 hoặc nhiều):</span>' +
                                    '<select hidden class="form-control" id="role-type' + id + '" multiple>' +
                                        '<option selected selected value="hr">Bộ phận nhân sự</option>' +
                                        '<option selected value="crm">Bộ phận nghiệp vụ</option>' +
                                        '<option value="other">Khác</option>' +
                                    '</select>' +
                            '</div>' +
                        '<hr/></div>';
                }
                else{
                    alert("Chuyển loại quy trình sang \"Cần người thẩm định\" để tạo loại yêu cầu \"Vắng mặt\"");
                    return '';
                }
                break;
            case 'EMAIL':
                state_view += '<div class="email-container">' + 
                    '<div class="email-header">' +
                        '<label class="control-label" id="to">To: </label>  <input class="form-control" id="to" type="text" placeholder="" />' +
                        '<a class="cbb">Cbb/Bb</a>' +
                        '<div id="additional"><label class="control-label" class="to">Cbb: </label>  <input class="form-control" id="Cbb" type="text" placeholder="" /></div>' +
                        '<label class="control-label" class="to">Bb: </label>  <input class="form-control" id="Bb" type="text" placeholder="" />' +
                        '<label class="control-label" id="subject">Subject: </label><input class="form-control" id="subject" type="text" placeholder="" />' +
                        '</div>' +
                    '<div class="email-body">' +
                        '<label class="control-label" id="email-content"></label><textarea class="form-control" rows="5" id="contents"></textarea>' +
                    '</div>' +
                    '<div class="email-attachment">' +
                        '<label>Attachment</label>' +
                    '</div>' +
                    '<div class="email-action">' +
                        '<i class="fas fa-paperclip " title="Đính kèm"></i>' +
                        '<i class="far fa-image " title="Ảnh"></i>' +
                        '<i class="far fa-laugh " title="Emoji"></i>' +
                        '<i class="fas fa-link " title="Link"></i>' +
                        '<div class="send"><i class="fab fa-telegram-plane " title="Gửi"></i></div>' +
                    '</div>' +
                '<hr/></div>';
                break;
            case 'GENERIC':
                state_view += '<div class="generic-contents">' +
                        '<input type="text" class="form-control" placeholder="" id="activity-name' + id + '">' +
                        '<div><a id="detail-label" onclick="toggling(this)" class="control-label">Mô tả chi tiết</a>' +
                        '<input type="text" class="form-control" placeholder="Mô tả nội dung công việc" id="activity-desc' + id + '"></div>' +
                        '<a class="control-label" onclick="toggling(this)">Thời gian thực hiện công việc (giờ): </a> <input type="number" class="form-control" id="activity-dura' + id + '">' +
                        '<label hidden id="activity-type' + id + '">GENERIC</label>' + 
                        '</div>' +
                        '<div class="role-area"><label class="control-label">Đối tượng thực hiện (chọn 1 hoặc nhiều):</label>' +
                                '<select class="form-control" id="role-type' + id + '" multiple>' +
                                    '<option value="hr">Bộ phận nhân sự</option>' +
                                    '<option value="cm">Bộ phận nghiệp vụ</option>' +
                                    '<option selected value="other">Khác</option>' +
                                '</select>' +
                        '</div>' +
                    '<hr/></div>';
                break;
            case 'COMMENT':
                return '';
                break;
        }
        state_view += '</div>';
        return state_view;
    }

    $('#btn-graph').click(function (params) {
        generate_path();
    });

    $('#btn-condition').click(function (params) {
        if (cdt == 1) {
            temp_activities = [];
            for (let i = 0; i < ids.length; i++) {

                var activity = $('#state-graph' + ids[i].toString()).val();
                temp_activities.push(activity);
            }
            default_condition(temp_activities);
        }
        add_transition(cdt);
        cdt++;
    });

    function add_transition(i) {
        var elem = '';
        elem += '<div><label style="display:inline-block" class="control-label">Nếu' +
        '<select style="display: inline-block" class="form-control" id="select-cond' + i + '">';
        activities.forEach(activity => {
            elem += '<option value="' + activity + '">' + activity +'</option>';
        });
        elem += '</select>' +
        'chọn <select style="display: inline-block" class="form-control" id="select-acti' + i + '">' ;
        actions.forEach(action => {
            elem += '<option value="' + action + '">' + action +'</option>';
        });
        elem += '</select>' +
        'thì đi đến' +
        '<select style="display: inline-block" class="form-control" id="select-answ' + i + '">';
        activities.forEach(activity => {
            elem += '<option value="' + activity + '">' + activity +'</option>';
        });
        elem +='</select></label></div>';
        $('.transition-area').append(elem);
    }

    function toggling(self) {
        $(self).next('input').slideToggle();
    }

    function hide_validation(cur, id) {
        var new_id = id + ' ' + cur;
        alert(new_id);
        $(new_id).toggle();
    }
    $('#name-validation').toggle();
    $('.state-icon>i').on('click', function () {
        $('.states-partial').append(createstate(curId + 1, $(this).attr('id').toUpperCase()));
        $('#activity-desc' + (curId + 1).toString()).slideToggle();
        $('#activity-dura' + (curId + 1).toString()).slideToggle();
        ids.push(curId + 1);
        curId++;
    }); 

    function get_rule() {
        rules = {};
        rules['paths'] = [];
        rules['states'] = {};
        states = {};
        var tree = $('#tree-proceed').is(':checked');
        if (!tree) {
            for (let i = 0; i < ids.length; i++) {
                const cur = ids[i];
                rule = {};
                var activity = $('#state-graph' + cur.toString()).val();
                if (i < ids.length - 1)
                {
                    
                    if (activity == undefined) {
                        return null;
                    }
                    rule['currentstate'] = activity;
                    var next = cur + 1;
                    rule['nextstate'] = $('#state-graph' + next.toString()).val();
                    rule['action'] = 'approve';
                    rules.paths.push(rule);
                }
                
                if (i == 0)
                {
                    rules.states['start'] = activity;
                }
                else if (i == ids.length - 1)
                {
                    rules.states['end'] = activity;
                }
            }
        }
        else {
            for (let i = 1; i <= cc; i++) {
                const cur = i;
                rule = {};
                var currentnode = $('#current-node' + cur.toString()).val();
                var action = $('#node-action' + cur.toString()).val();
                var nextnode = $('#next-node' + cur.toString()).val();
                if (currentnode == undefined || nextnode == undefined) {
                    return null;
                }
                if (action == undefined || action == '') {
                    return null;
                }
                console.log("tree");        
                rule['nextnode'] = nextnode;
                rule['currentnode'] = currentnode;
                var next = cur + 1;
                rule['action'] = action;
                rules.paths.push(rule);
                
            }
        }
        return rules;
    }

    $('#btn-submit').on('click', function (params) {
        var states = [];
        request['title'] = $('#request-name').val();
        if(request['title'] == undefined)
        {
            alert("Nhập tên quy trình");
        }
        request['process'] = {};
        request['process']['states'] = [];
        request['process']['nodes'] = [];
        request['process']['actions'] = [];
        request['process']['roles'] = [];
        request['process']['rules'] = [];
        request['process']['activities'] = [];
        request['process']['root'] = [];
        var root = null;
        var idns = document.querySelectorAll('[id]');
        var rules = null;
        var manual = $('#manual-proceed').is(':checked');
        var tree = $('#tree-proceed').is(':checked');
        if (manual || tree) {
            rules = get_rule();
            console.log(rules);
        }
        if (rules == null && manual)
        {
            alert("Chưa tạo sơ đồ");
            return;
        }
        if (rules == null && tree)
        {
            alert("Chưa tạo sơ đồ");
            return;
        }
        for (let i = 1; i <= ids.length; i++) {
            activity = {};
            if (tree) {
                node = {};
                node['parent'] = '';
                node['childs'] = [];
                node['actions'] = [];
                node['level'] = -1;
                node['name'] = activity['name'] = $('#activity-name' + i.toString()).val();
                node['description'] = activity['description'] = $('#activity-desc' + i.toString()).val();
                activity['duration'] = $('#activity-dura' + i.toString()).val();
                activity['activitytype'] = $('#activity-type' + i.toString()).text();
                var roles =$('#role-type' + i.toString()).val();
                activity['roles'] = [];
                activity['absentname'] = $('#activity-worker' + i.toString()).val();
                activity['dayoff'] = $('#activity-off-day' + i.toString()).val();
                <!-- activity['isreallynotapproved'] = $('#activity-reason' + i.toString()).val(); -->
                <!-- activity['approvername'] = $('#activity-worker' + i.toString()).val(); -->
                activity['reason'] = $('#activity-reason' + i.toString()).val();
                activity['campaign']
                roles.forEach(element => {
                    if(!activity['roles'].some(e => e.name === element)) {
                        activity['roles'].push({'name': element});
                    }
                });
                if (activity.roles.length <= 0) {
                    alert('Chưa chọn đối tượng phụ trách công việc ' + activity.name);
                    return;
                }
                node['activities'] = [];
                node['activities'].push(activity);
                
                request['process']['nodes'].push(node);
            }
            else {
                state = {};
                state['name'] = activity['name'] = $('#activity-name' + i.toString()).val();
                activity['description'] = $('#activity-desc' + i.toString()).val();
                activity['duration'] = $('#activity-dura' + i.toString()).val();
                activity['activitytype'] = $('#activity-type' + i.toString()).text();
                var roles =$('#role-type' + i.toString()).val();
                activity['roles'] = [];
                activity['absentname'] = $('#activity-worker' + i.toString()).val();
                activity['dayoff'] = $('#activity-off-day' + i.toString()).val();
                <!-- activity['isreallynotapproved'] = $('#activity-reason' + i.toString()).val(); -->
                <!-- activity['approvername'] = $('#activity-worker' + i.toString()).val(); -->
                activity['reason'] = $('#activity-reason' + i.toString()).val();
                roles.forEach(element => {
                    if(!activity['roles'].some(e => e.name === element)) {
                        activity['roles'].push({'name': element});
                    }
                });
                if (activity.roles.length <= 0) {
                    alert('Chưa chọn đối tượng phụ trách công việc ' + activity.name);
                    return;
                }
                state['eta'] = $('#state-eta' + i.toString()).val();
                state['activities'] = [];
                state['activities'].push(activity);
                states.push(state.name);
                
                if (!manual) {
                    activities.push(activity.name);
                    if(i == 1)
                    {
                        state['statetype'] = 'start';
                    }
                    else if(i == ids.length)
                    {
                        state['statetype'] = 'end';                
                    }
                    else
                    {
                        state['statetype'] = 'normal';   
                    }
                }
                else {
                    if(rules.states.start == state.name)
                    {
                        state['statetype'] = 'start';
                    }
                    else if(rules.states.end == state.name)
                    {
                        state['statetype'] = 'end';                
                    }
                    else
                    {
                        state['statetype'] = 'normal';   
                    }
                }

                request['process']['states'].push(state);
            }
            
        }

        if (!manual && !tree) {
            request['process']['actions'] = ['auto'];
            for (let index = 0; index < states.length - 1; index++) {
                var rule = {'action': 'auto advance', 'currentstate': states[index], 'nextstate': states[index + 1]};
                request['process']['rules'].push(rule);
            }
        }
        else if (manual) {
            rules.paths.forEach(path => {
                if (!actions.includes(path.action)) {
                    actions.push(path.action);
                    
                }
                request['process']['rules'].push(path);
                
            });
            if (cdt > 1) {
                for (let i = 1; i < cdt; i++) {
                    var another_rule = {};
                    another_rule['action'] = $('#select-acti' + i.toString()).val();                     
                    another_rule['currentstate'] = $('#select-cond' + i.toString()).val();                     
                    another_rule['nextstate'] = $('#select-answ' + i.toString()).val();
                    if (activate_trigger) {
                        another_rule['trigger'] = {"consequence": {"name": "campaign", "method": "subscribe"}, "events": [{"condition": {"param": "age", "operator": "ge", "threshold": "18", "type": "integer"}, "name": "campaign"}]};
                    }
                    var is_not_duplicated = true;
                    for (let index = 0; index < request['process']['rules'].length; index++) {
                        const rule = request['process']['rules'][index];
                        if (rule.action == another_rule.action || rule.currentstate == another_rule.currentstate || rule.nextstate == another_rule.nextstate) {
                            is_not_duplicated = false;
                        }
                    }
                    if (!is_not_duplicated) {
                        request['process']['rules'].push(another_rule);                 
                    }
                }
            }
        }
        if (tree) {
            actions = [];
            rules.paths.forEach(path => {
                if (!actions.includes(path.action)) {
                    actions.push(path.action);
                }
                request['process']['rules'].push(path);
                var p = request['process']['nodes'][request['process']['nodes'].findIndex(i => i.name === path.currentnode)];
                var c = request['process']['nodes'][request['process']['nodes'].findIndex(i => i.name === path.nextnode)];
                p.childs.push(c);
                p.actions.push({"name": path.action});
                c.parent = p.name;
            });
            request['process']['nodes'].forEach(node => {
                if (node.parent == null || node.parent == undefined || node.parent == '') {
                    node.level = 0;
                }
                else {
                    var parent = request['process']['nodes'][request['process']['nodes'].findIndex(i => i.name == node.parent)];
                    if (parent != null) {
                        node.level = parent.level + 1;

                    }
                }
            });
            root = request['process']['nodes'][request['process']['nodes'].findIndex(i => i.level === 0)];
            request.process.root = root
        }
        actions.forEach(action => {
            request['process']['actions'].push({'name': action}) ;
        });
        if (tree) {
            request['currentnode'] = root.name;
        }
        else {
            request['currentstate'] = request.process.states[request.process.states.findIndex(i => i.statetype === 'start')].name;
        }
        console.log(request);
        if (tree) {
            $.ajax({
                type: "post",
                url: '@Url.Action("createtree", "requests")',
                data: request,
                dataType: "json",
                header: {
                    'content-type': 'application/json'
                },
                success: function (response) {
                    console.log(response);
                    alert(response);
                },
                error: function () {
                    console.log('error');
                }
            });
        }
        else {
            $.ajax({
                type: "post",
                url: '@Url.Action("create", "requests")',
                data: request,
                dataType: "json",
                header: {
                    'content-type': 'application/json'
                },
                success: function (response) {
                    console.log(response);
                    alert(response);
                },
                error: function () {
                    console.log('error');              
                }
            });
        }
    });
</script>